apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "monitor-api.fullname" . }}
  labels:
    {{- include "monitor-api.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "monitor-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "monitor-api.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "monitor-api.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-nats
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -zv {{ .Release.Name }}-nats {{ .Values.waitForNatsPort | default 4222 }}; do echo "Waiting for NATS"; sleep 2; done;']
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 64Mi
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port | default 8100 }}
              protocol: TCP
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- with .Values.probes }}
          {{- if .liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .liveness.httpGet.path }}
              port: {{ .liveness.httpGet.port }}
            initialDelaySeconds: {{ .liveness.initialDelaySeconds }}
            periodSeconds: {{ .liveness.periodSeconds }}
            timeoutSeconds: {{ .liveness.timeoutSeconds | default 3 }}
            successThreshold: {{ .liveness.successThreshold | default 1 }}
            failureThreshold: {{ .liveness.failureThreshold | default 3 }}
          {{- end }}
          {{- if .readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .readiness.httpGet.path }}
              port: {{ .readiness.httpGet.port }}
            initialDelaySeconds: {{ .readiness.initialDelaySeconds }}
            periodSeconds: {{ .readiness.periodSeconds }}
            timeoutSeconds: {{ .readiness.timeoutSeconds | default 3 }}
            successThreshold: {{ .readiness.successThreshold | default 1 }}
            failureThreshold: {{ .readiness.failureThreshold | default 3 }}
          {{- end }}
          {{- if .startup.enabled }}
          startupProbe:
            httpGet:
              path: {{ .startup.httpGet.path }}
              port: {{ .startup.httpGet.port }}
            initialDelaySeconds: {{ .startup.initialDelaySeconds }}
            periodSeconds: {{ .startup.periodSeconds }}
            timeoutSeconds: {{ .startup.timeoutSeconds | default 3 }}
            successThreshold: {{ .startup.successThreshold | default 1 }}
            failureThreshold: {{ .startup.failureThreshold }}
          {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}